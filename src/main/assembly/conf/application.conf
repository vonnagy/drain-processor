
container {

  http {
    interface = "0.0.0.0"
    port = ${PORT}

    cidr {
      # This is a list of IP ranges to allow through. Can be empty.
      allow = []
      # This is a list of IP ranges to specifically deny access. Can be empty.
      deny = []
    }
  }

  metrics {
    # These are the metrics reporters
    reporters {
      Slf4j {
        # The name of the reporter class
        class = "com.github.vonnagy.service.container.metrics.reporting.Slf4jReporter"
        # Is the reporter enabled
        enabled = on
        # What is the interval to report on
        reporting-interval = 60s
        # What is the logger
        logger = "com.github.vonnagy.service.container.metrics"
      }
    }
  }
}

akka {
  loglevel = ${LOG_LEVEL}

  actor {
    deployment {
      /service/processor-manager/drainer {
        router = consistent-hashing-pool
        nr-of-instances = 5
        virtual-nodes-factor = 10
      }
    }
  }
}

log {

  drains {
    max-bundle-size = 100
    bundle-timeout = 2s
  }


  processors {
    kinesis {
      # The name of the processor class
      class = "drainprocessor.processor.kinesis.KinesisProcessor"
      # Is the processor enabled
      enabled = on
      # The access key
      access-key = ${AWS_KEY}
      # The secret
      access-secret = ${AWS_SECRET}
      # The AWS endpoint to use
      endpoint = "https://kinesis.us-west-2.amazonaws.com"

      streams {
        checkpoint-interval = 1s
        checkpoint-retries = 10
        backoff-time = 10s

        log-stream {
          initial-position = "TRIM_HORIZON"
          max-records = 10000
        }
      }
    }
  }


}